import logging
import re
from datetime import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from threading import Thread
from flask import Flask

# --- Flask Fake Server ---
app_flask = Flask(__name__)

@app_flask.route('/')
def home():
    return 'Bot is running!'

def run_flask():
    app_flask.run(host='0.0.0.0', port=10000)

Thread(target=run_flask).start()

# --- Telegram Bot Logic ---
DATE, SELLER, DESCRIPTION, PRICE, UNIT, QUANTITY, NOTE, CONFIRM = range(8)

logging.basicConfig(level=logging.INFO)

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/levkinbot-3f4c6dfcd2e8.json", scope)
client = gspread.authorize(creds)
sheet = client.open("LevkinsPayments").sheet1

BOT_TOKEN = os.environ["BOT_TOKEN"]

cancel_filter = MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), lambda u, c: cancel(u, c))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):", reply_markup=reply_markup)
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_date = update.message.text.strip()
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", raw_date):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02.06.2025)")
        return DATE
    try:
        datetime.strptime(raw_date, "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return DATE
    context.user_data['date'] = raw_date
    await update.message.reply_text("üë§ –£ –∫–æ–≥–æ –ø–æ–∫—É–ø–∫–∞?")
    return SELLER

async def get_seller(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['seller'] = update.message.text.strip()
    await update.message.reply_text("üì¶ –ß—Ç–æ –∫—É–ø–∏–ª–∏?")
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text.strip()
    await update.message.reply_text("üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É?")
    return PRICE

async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    price_input = update.message.text.strip()
    try:
        price = float(price_input.replace(",", "."))
        context.user_data['price'] = price
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5)")
        return PRICE
    await update.message.reply_text("üìè –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–≥, —à—Ç, –ª):")
    return UNIT

async def get_unit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['unit'] = update.message.text.strip()
    await update.message.reply_text("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ?")
    return QUANTITY

async def get_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    qty_input = update.message.text.strip()
    try:
        quantity = float(qty_input.replace(",", "."))
        context.user_data['quantity'] = quantity
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4)")
        return QUANTITY
    await update.message.reply_text("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–∏–ª–∏ ¬´‚Äì¬ª):")
    return NOTE

async def get_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['note'] = update.message.text.strip()
    price = context.user_data['price']
    quantity = context.user_data['quantity']
    total = round(price * quantity, 2)
    context.user_data['total'] = total

    summary = (
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–î–∞—Ç–∞: {context.user_data['date']}\n"
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {context.user_data['seller']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']}\n"
        f"–ï–¥. –∏–∑–º.: {context.user_data['unit']}\n"
        f"–¶–µ–Ω–∞ –∑–∞ –µ–¥.: {context.user_data['price']}\n"
        f"–ö–æ–ª-–≤–æ: {context.user_data['quantity']}\n"
        f"–°—É–º–º–∞: {context.user_data['total']}\n"
        f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {context.user_data['note']}\n\n"
        f"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    buttons = [[
        InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å", callback_data="confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(buttons))
    return CONFIRM

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "confirm":
        user = query.from_user
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        row = [
            context.user_data['date'],
            context.user_data['seller'],
            context.user_data['description'],
            context.user_data['price'],
            context.user_data['unit'],
            context.user_data['quantity'],
            context.user_data['total'],
            context.user_data['note'],
            user.full_name,
            str(user.id),
            user.username or "-",
            user.phone_number if hasattr(user, 'phone_number') else "-",
            timestamp
        ]
        try:
            sheet.append_row(row)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
        buttons = [[
            InlineKeyboardButton("‚ûï –î–∞", callback_data="again"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="exit")
        ]]
        await query.edit_message_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞–ø–∏—Å—å?",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return CONFIRM
    elif query.data == "cancel":
        await query.edit_message_text("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
        return ConversationHandler.END
    elif query.data == "again":
        await query.edit_message_text("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):")
        return DATE
    elif query.data == "exit":
        await query.edit_message_text("üëã –•–æ—Ä–æ—à–æ, –≤–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å$"), start)
        ],
        states={
            DATE: [cancel_filter, MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            SELLER: [cancel_filter, MessageHandler(filters.TEXT & ~filters.COMMAND, get_seller)],
            DESCRIPTION: [cancel_filter, MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            PRICE: [cancel_filter, MessageHandler(filters.TEXT & ~filters.COMMAND, get_price)],
            UNIT: [cancel_filter, MessageHandler(filters.TEXT & ~filters.COMMAND, get_unit)],
            QUANTITY: [cancel_filter, MessageHandler(filters.TEXT & ~filters.COMMAND, get_quantity)],
            NOTE: [cancel_filter, MessageHandler(filters.TEXT & ~filters.COMMAND, get_note)],
            CONFIRM: [CallbackQueryHandler(handle_confirmation)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)
        ]
    )
    app.add_handler(conv_handler)
    app.run_polling()
